% -*- mode: ess-noweb; ess-noweb-default-code-mode: c-mode; -*-

\documentclass{tufte-handout}


\input{preamble.tex}


\title{Build Your Own Lisp}


\hypersetup{
  pdffitwindow=true,
  pdfstartview={FitH},
  pdftitle={Build Your Own Lisp},
  pdfauthor={Eric Bailey <eric@ericb.me>},
  pdfsubject={Working through the eponymous book},
  pdfkeywords={UNIX, C language, learning, lisp, programming langauge theory},
  colorlinks=true,
  linkcolor=ErlangRed,
  urlcolor=ErlangRed
}


\date{%
  May 10, 2018
  \thanks{Last updated \today}%
}


\begin{document}

\maketitle
@


\begin{abstract}
  For my own edification, and my eternal love of the LISP family and
  \acrshort{plt}, what follows is an implementation in C of a simple,
  Lisp-like programming language, based on Build Your Own
  Lisp \citep{byol}. Since I'm a bit of masochist, this is a
  \marginhref{https://en.wikipedia.org/wiki/Literate_programming}{literate
    program}, written using Noweb\cite{noweb}.
\end{abstract}


\tableofcontents


\newpage
\section{Outline}

\todoo{Describe the outline}

<<parsing.c>>=
<<Include the necessary headers.>>


<<Load the Lispy grammar.>>


double eval_binop(char *op, double x, double y)
{
  <<Eval(uate) a binary operation.>>
}


double eval(mpc_ast_t *ast)
{
    <<Eval(uate) the AST.>>
}


int main(int argc, char *argv[])
{
    <<Define the language.>>

    <<Print version and exit information.>>

    <<Loop until the input is empty.>>

    <<Undefine and delete the parsers.>>

    return 0;
}
@ %def eval
@ %def eval_binop


\newpage
\section{Welcome}

What good is a \gls{repl} without a welcome message?  For now, simply
print the version and describe how to exit.

<<Print version and exit information.>>=
puts("Lispy v%VERSION%");
puts("Press ctrl-c to exit\n");
@


\section{Defining the Language}

In order to make sense of user input, we need to define a \gls{grammar}.

<<lispy.mpc>>=
integer  : /-?[0-9]+/ ;
decimal  : /-?[0-9]+\.[0-9]+/ ;
number   : <decimal> | <integer> ;
operator : '+' | '-' | '*' | '/' ;
expr     : <number> | '(' <operator> <expr>+ ')' ;
lispy    : /^/ <operator> <expr>+ /$/ ;
@

\todoo{Describe this trick}
<<Load the Lispy grammar.>>=
static const char LISPY_GRAMMAR[] = {
#include "lispy.xxd"
};
@ %def LISPY_GRAMMAR
\marginnote{See: \url{https://stackoverflow.com/a/411000}}


To implement the \gls{grammar}, we need to create some \glspl{parser}.

<<Define the language.>>=
mpc_parser_t *Integer  = mpc_new("integer");
mpc_parser_t *Decimal  = mpc_new("decimal");
mpc_parser_t *Number   = mpc_new("number");
mpc_parser_t *Operator = mpc_new("operator");
mpc_parser_t *Expr     = mpc_new("expr");
mpc_parser_t *Lispy    = mpc_new("lispy");

@ %def Integer
@ %def Decimal
@ %def Number
@ %def Operator
@ %def Expr
@ %def Lispy


Finally, using the defined \gls{grammar} and
each of the [[<<created parsers>>]],

<<created parsers>>=
Integer, Decimal, Number, Operator, Expr, Lispy
@
%

... we can define the Lispy language.

<<Define the language.>>=
mpca_lang(MPCA_LANG_DEFAULT, LISPY_GRAMMAR,
          <<created parsers>>);
@


Since we're implementing this in C, we need to clean up after ourselves.  The
\cee{mpc}\cite{mpc} library makes this easy, by providing the [[mpc_cleanup]]
function.

<<Undefine and delete the parsers.>>=
mpc_cleanup(6, <<created parsers>>);
@


\section{R is for Read}

To implement the R in \acrshort{repl}, use [[readline]]
from \cee{libedit}\cite{libedit}.

<<Read a line of user input.>>=
char *input = readline("> ");
@ %def input

To check whether user input is nonempty, and thus whether we should
continue looping, use the following expression.

<<[[input]] is nonempty>>=
input && *input
@

Here, \cee{input} is functionally equivalent to \cee{input != NULL}, and
\cee{*input} is functionally equivalent to \cee{input[0] != '\0'}, i.e.
[[input]] is non-null and nonempty, respectively.

So long as [[input]] is nonempty, add it to the
\cee{libedit}\cite{libedit} history table.

<<Add [[input]] to the history table.>>=
add_history(input);
@

Declare a variable, [[parsed]], to hold the results
of attempting to parse user input as Lispy code.

<<Declare a variable to hold parsing results.>>=
mpc_result_t parsed;
@ %def parsed

To attempt said parsing, use [[mpc_parse]], the result of which
we can branch on to handle success and failure.

<<the input can be parsed as Lispy code>>=
mpc_parse("<stdin>", input, Lispy, &parsed)
@


\section{E is for Eval(uate)}

Since our terms consist of only numbers and operations thereon, the
[[result]] of evaluating a Lispy expression can be represented as a
\cee{double}-precision number.

<<Eval(uate) the input.>>=
mpc_ast_t *ast = parsed.output;

double result = eval(ast);
@ %def ast
@ %def result


\todor{Describe the evaluation strategy}

If the \gls{ast} is tagged as a number, return it directly.

<<Eval(uate) the AST.>>=
if (strstr(ast->tag, "number"))
    return atof(ast->contents);

@


If the \acrshort{ast} is neither an integer nor a float, then it's an
expression.  Use the \cee{int i} to interate through the children of
the \acrshort{ast}.

<<Eval(uate) the AST.>>=
int i = 0;

@

In an expression, the operator is always the second child.

<<Eval(uate) the AST.>>=
char *op = ast->children[++i]->contents;

@ %def op

Evaluate the next child, which is the first operand.

<<Eval(uate) the AST.>>=
double result = eval(ast->children[++i]);

@

If the operation is unary subtraction, negate the operand.

<<Eval(uate) the AST.>>=
if (!strcmp(op, "-") && ast->children_num == 4)
    return -result;

@

While there are more children, i.e.

<<there are more operands>>=
++i < ast->children_num
@

... and the next child is an expression, i.e.

<<the next child is an expression>>=
strstr(ast->children[i]->tag, "expr")
@

... evaluate the next operand.

<<Eval(uate) the next operand.>>=
result = eval_binop(op, result, eval(ast->children[i]));
@

\todor{Describe binop evaluation}

If the [[op]] is \cee{"+"}, perform addition.

<<Eval(uate) a binary operation.>>=
if (!strcmp(op, "+"))
    return x + y;

@


If the [[op]] is \cee{"-"}, perform subtraction.

<<Eval(uate) a binary operation.>>=
if (!strcmp(op, "-"))
    return x - y;

@


If the [[op]] is \cee{"*"}, perform multiplication.

<<Eval(uate) a binary operation.>>=
if (!strcmp(op, "*"))
    return x * y;

@


If the [[op]] is \cee{"/"}, perform division.

<<Eval(uate) a binary operation.>>=
if (!strcmp(op, "/"))
    return x / y;

@


Otherwise, return \cee{0}.
\todor{Bind an error message or something}

<<Eval(uate) a binary operation.>>=
return 0;
@


Express the recursive operand evaluation as a \cee{while} loop,
and return the result.

<<Eval(uate) the AST.>>=
while (<<there are more operands>>
       && <<the next child is an expression>>)
    <<Eval(uate) the next operand.>>

return result;
@


\section{P is for Print}

Upon success, print the result and delete the \acrshort{ast}.

<<Print the result and delete the AST.>>=
printf("%g\n", result);

mpc_ast_delete(ast);
@


Print and delete the error upon failure.

<<Print and delete the error.>>=
mpc_err_print(parsed.error);
mpc_err_delete(parsed.error);
@

\section{L is for Loop}

<<Loop until the input is empty.>>=
bool nonempty;
do {
  <<Read, eval(uate), and print.>>
} while (nonempty);
@ %def nonempty

As previously described, in the body of the loop,
\textbf{R}ead a line of user input.

<<Read, eval(uate), and print.>>=
<<Read a line of user input.>>
@

If, and only if, it's not empty, add it to the history table,
\textbf{E}val(uate) it, and \textbf{P}rint the result.

<<Read, eval(uate), and print.>>=
if ((nonempty = (<<[[input]] is nonempty>>))) {
    <<Add [[input]] to the history table.>>

    <<Declare a variable to hold parsing results.>>
    if (<<the input can be parsed as Lispy code>>) {
        <<Eval(uate) the input.>>
        <<Print the result and delete the AST.>>
    } else {
        <<Print and delete the error.>>
    }
}

@

Once we're done, deallocate the space pointed to by [[input]],
making it available for futher allocation.

<<Read, eval(uate), and print.>>=
free(input);
@
\marginnote{N.B. This is a no-op when \cee{!input}.}


\section{Headers}

\todoo{Describe headers}

<<Include the necessary headers.>>=
<<Include the boolean type and values.>>
<<Include the standard I/O functions.>>
<<Include the standard library definitions.>>
<<Include some string operations.>>

<<Include the line editing functions from libedit.>>
<<Include the micro parser combinator definitions.>>
@


<<Include the boolean type and values.>>=
#include <stdbool.h>
@ %def bool

<<Include the standard I/O functions.>>=
#include <stdio.h>
@ %def printf

<<Include the standard library definitions.>>=
#include <stdlib.h>
@ %def atof
@ %def atoi
@ %def free

<<Include some string operations.>>=
#include <string.h>
@ %def strcmp
@ %def strstr

<<Include the line editing functions from libedit.>>=
#include <editline/readline.h>
@ %def add_history
@ %def readline

<<Include the micro parser combinator definitions.>>=
#include <mpc.h>
@ %def mpc_ast_delete
@ %def mpc_ast_print
@ %def mpc_ast_t
@ %def mpc_cleanup
@ %def mpc_err_delete
@ %def mpc_err_print
@ %def mpc_new
@ %def mpc_parse
@ %def mpc_parser_t
@ %def mpc_result_t
@ %def mpca_lang


\newpage
\section{Full Listings}

\srclink{lispy.mpc}:
\inputminted{ruby}{lispy.mpc}


\newpage
\srclink{parsing.c}:
\inputc{parsing.c}


\newpage
\section{Chunks}
\nowebchunks


\newpage
\section{Index}
\nowebindex


\newpage
\printglossaries

\newpage
\bibliography{byol}
\bibliographystyle{plainnat}


\newpage
\listoftodos

\end{document}
