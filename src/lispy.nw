% -*- mode: ess-noweb; ess-noweb-default-code-mode: c-mode; -*-

\documentclass{tufte-handout}


\input{preamble.tex}


\title{Lispy: a simple Lisp-like language}


\makeatletter
\hypersetup{
  pdffitwindow=true,
  pdfstartview={FitH},
  pdftitle={\@title},
  pdfauthor={\@author <eric@ericb.me>},
  pdfsubject={Working through Build Your Own Lisp by Daniel Holden},
  pdfkeywords={UNIX, C language, learning, lisp, programming language theory},
  colorlinks=true,
  linkcolor=ErlangRed,
  urlcolor=ErlangRed
}
\makeatother


\date{%
  May 10, 2018
  \thanks{Current version: \cee{VERSION}. \\ Last updated \today.}%
}


\begin{document}

\maketitle
@


\begin{abstract}
  For my own edification, and my eternal love of the LISP family and
  \acrshort{plt}, what follows is an implementation in C of a simple,
  Lisp-like programming language, based on Build Your Own
  Lisp \citep{byol}. Since I'm a bit of masochist, this is a
  \marginhref{https://en.wikipedia.org/wiki/Literate_programming}{literate
    program}, written using Noweb\cite{noweb}.
\end{abstract}


\tableofcontents


\newpage
\section{Outline}

\todoo{Describe the outline}

<<lispy.c>>=
<<Include the necessary headers.>>


<<Define some useful macros.>>


<<Load the Lispy grammar.>>


<<Define possible lval and error types.>>

<<Define the Lispy data structures.>>


@

<<lispy.c>>=
lval *lval_add(lval *xs, lval *x)
{
    <<Add an element to an S-expression.>>

    return xs;
}


@ %def lval_add

<<lispy.c>>=
lval *lval_pop(lval *xs, int i)
{
    <<Extract an element and shift the list.>>
}


@ %def lval_pop

<<lispy.c>>=
lval *lval_take(lval *xs, int i)
{
    <<Pop the list then delete it.>>
}


@ %def lval_take

<<lispy.c>>=
lval *lval_join(lval *xs, lval *ys)
{
    <<Add every y in ys to xs.>>
}


@ %def lval_join


\marginhref{https://en.wikipedia.org/wiki/Forward_declaration}{Forward declare}
[[lval_print]], since it's
\marginhref{https://en.wikipedia.org/wiki/Mutual_recursion}{mutually recursive}
with [[lval_expr_print]].

<<lispy.c>>=
void lval_print(lval *val);


@


<<lispy.c>>=
void lval_expr_print(lval *expr, char open, char close)
{
    <<Print an expression.>>
}


@ %def lval_expr_print

<<lispy.c>>=
void lval_print(lval *val)
{
    <<Print a Lispy value.>>
}


@ %def lval_print

<<lispy.c>>=
void lval_println(lval *val)
{
    lval_print(val);
    putchar('\n');
}


@ %def lval_println

<<lispy.c>>=
lval *builtin_list(lval *args)
{
    <<Convert an S-expression to a Q-expression.>>
}


@ %def builtin_list

<<lispy.c>>=
lval *builtin_head(lval *args)
{
    <<Pop the list and delete the rest.>>
}


@ %def builtin_head


<<lispy.c>>=
lval *builtin_tail(lval *args)
{
    <<Return the tail of a list.>>
}


@ %def builtin_tail

<<lispy.c>>=
lval *builtin_join(lval *args)
{
    <<Return the concatenation of lists.>>
}

@ %def builtin_join


Forward declare [[lval_eval]], since it's used by [[builtin_eval]] and
mutually recursive with [[lval_eval_sexpr]].

<<lispy.c>>=
lval *lval_eval(lval* val);


@


<<lispy.c>>=
lval *builtin_eval(lval *args)
{
    <<Evaluate a Q-expression.>>
}


@ %def builtin_val


<<lispy.c>>=
lval *builtin_op(char *op, lval *args)
{
  <<Eval(uate) a built-in operation.>>
}


@ %def builtin_binop


<<lispy.c>>=
lval *builtin(char *fname, lval *args)
{
    <<Evaluate a built-in function or operation.>>
}

@ %def builtin


<<lispy.c>>=
lval* lval_eval_sexpr(lval *args)
{
    <<Evaluate an S-expression.>>
}


@


<<lispy.c>>=
lval* lval_eval(lval* val)
{
    <<Evaluate an expression.>>
}


@

<<lispy.c>>=
lval *lval_read_num(mpc_ast_t *ast)
{
    <<Read a number.>>
}


lval *lval_read(mpc_ast_t *ast)
{
    <<Read a Lispy value.>>
}


@ %def lval_read


<<lispy.c>>=
int main(int argc, char *argv[])
{
    <<Define the language.>>

    <<Print version and exit information.>>

    <<Loop until the input is empty.>>

    <<Undefine and delete the parsers.>>

    return 0;
}
@


\newpage
\section{Welcome}

What good is a \gls{repl} without a welcome message?  For now, simply
print the version and describe how to exit.

<<Print version and exit information.>>=
puts("Lispy v%VERSION%");
puts("Press ctrl-c to exit\n");
@


\section{Defining the Language}

In order to make sense of user input, we need to define a \gls{grammar}.

<<lispy.mpc>>=
number "number" : /[-+]?[0-9]+(\.[0-9]+)?/ ;
symbol "symbol" : /[a-za-Z_+*%^\/\\=<>!*-]+/ ;
sexpr           : '(' <symbol> <expr>+ ')' ;
qexpr           : '{' (<symbol> | <expr>)* '}' ;
expr            : <number> | <sexpr> | <qexpr> ;
lispy           : /^/ <expr>* /$/ ;
@

\todoo{Describe this trick}
<<Load the Lispy grammar.>>=
static const char LISPY_GRAMMAR[] = {
#include "lispy.xxd"
};
@ %def LISPY_GRAMMAR
\marginnote{See: \url{https://stackoverflow.com/a/411000}}


To implement the \gls{grammar}, we need to create some \glspl{parser}.

<<Define the language.>>=
mpc_parser_t *Number    = mpc_new("number");
mpc_parser_t *Symbol    = mpc_new("symbol");
mpc_parser_t *Sexpr     = mpc_new("sexpr");
mpc_parser_t *Qexpr     = mpc_new("qexpr");
mpc_parser_t *Expr      = mpc_new("expr");
mpc_parser_t *Lispy     = mpc_new("lispy");

@ %def Number
@ %def Symbol
@ %def Sexpr
@ %def Qexpr
@ %def Expr
@ %def Lispy


Finally, using the defined \gls{grammar} and
each of the [[<<created parsers>>]],

<<created parsers>>=
Number, Symbol, Sexpr, Qexpr, Expr, Lispy
@

... we can define the Lispy language.

<<Define the language.>>=
mpc_err_t *err = mpca_lang(MPCA_LANG_PREDICTIVE, LISPY_GRAMMAR,
                     <<created parsers>>);

if (err != NULL) {
    puts(LISPY_GRAMMAR);
    mpc_err_print(err);
    mpc_err_delete(err);
    exit(100);
}
@


Since we're implementing this in C, we need to clean up after ourselves.  The
\cee{mpc}\cite{mpc} library makes this easy, by providing the [[mpc_cleanup]]
function.

<<Undefine and delete the parsers.>>=
mpc_cleanup(6, <<created parsers>>);
@


\section{R is for Read}

To implement the R in \acrshort{repl}, use [[readline]]
from \cee{libedit}\cite{libedit}.

<<Read a line of user input.>>=
char *input = readline("> ");
@ %def input

To check whether user input is nonempty, and thus whether we should
continue looping, use the following expression.

<<[[input]] is nonempty>>=
input && *input
@

Here, \cee{input} is functionally equivalent to \cee{input != NULL}, and
\cee{*input} is functionally equivalent to \cee{input[0] != '\0'}, i.e.
[[input]] is non-null and nonempty, respectively.

So long as [[input]] is nonempty, add it to the
\cee{libedit}\cite{libedit} history table.

<<Add [[input]] to the history table.>>=
add_history(input);
@

Declare a variable, [[parsed]], to hold the results
of attempting to parse user input as Lispy code.

<<Declare a variable to hold parsing results.>>=
mpc_result_t parsed;
@ %def parsed

To attempt said parsing, use [[mpc_parse]], the result of which
we can branch on to handle success and failure.

<<the input can be parsed as Lispy code>>=
mpc_parse("<stdin>", input, Lispy, &parsed)
@


\section{E is for Eval(uate)}

Since our terms consist of only numbers and operations thereon, the
[[result]] of evaluating a Lispy expression can be represented as a
\cee{double}-precision number.

<<Eval(uate) the input.>>=
mpc_ast_t *ast = parsed.output;

lval *result = lval_eval(lval_read(ast));
@ %def ast


\todor{Describe the evaluation strategy}

If the \gls{ast} is tagged as a number, convert it to a \cee{double}.

<<Read a Lispy value.>>=
if (strstr(ast->tag, "number"))
    return lval_read_num(ast);

@

\todoo{Describe this}

<<Read a number.>>=
errno = 0;
double num = strtod(ast->contents, NULL);
return errno != ERANGE ? lval_num(num) : lval_err(LERR_BAD_NUM);
@

If the \gls{ast} is tagged as a symbol, convert it to one.

<<Read a Lispy value.>>=
if (strstr(ast->tag, "symbol"))
    return lval_sym(ast->contents);

@


\todoo{Describe this}

<<Read a Lispy value.>>=
lval *val = NULL;
@

If we're at the root of the \gls{ast}, create an empty list.

<<Read a Lispy value.>>=
if (!strcmp(ast->tag, ">"))
    val = lval_sexpr();
@

If it's tagged as a Q-expression, create an empty list.
<<Read a Lispy value.>>=
if (strstr(ast->tag, "qexpr"))
    val = lval_qexpr();
@


Similarly if it's tagged as an S-expression, create an empty list.

<<Read a Lispy value.>>=
if (strstr(ast->tag, "sexpr"))
    val = lval_sexpr();

@

\todoo{Describe this}

<<Read a Lispy value.>>=
for (int i = 0; i < ast->children_num; i++) {
    if(!strcmp(ast->children[i]->contents, "(")) continue;
    if(!strcmp(ast->children[i]->contents, ")")) continue;
    if(!strcmp(ast->children[i]->contents, "{")) continue;
    if(!strcmp(ast->children[i]->contents, "}")) continue;
    if(!strcmp(ast->children[i]->tag, "regex")) continue;
    val = lval_add(val, lval_read(ast->children[i]));
}

@

\begin{marginnote}
<<Reallocate the memory used.>>=
xs->cell = realloc(xs->cell, sizeof(lval *) * xs->count);
@
\end{marginnote}

\todoo{Describe this, incl. how it's not cons}

<<Add an element to an S-expression.>>=
xs->count++;
<<Reallocate the memory used.>>
xs->cell[xs->count - 1] = x;
@

Finally, return the Lispy value.
<<Read a Lispy value.>>=
return val;
@

\begin{marginnote}
<<For each argument>>=
for (int i = 0; i < args->count; i++)
@

<<the argument is not a number>>=
!lval_is_num(args->cell[i])
@

<<Delete the arguments and return a bad number error.>>=
lval_del(args);
return lval_err(LERR_BAD_NUM);
@
\end{marginnote}



\subsection{Evaluating built-in operations}

Ensure all arguments are numbers.
<<Eval(uate) a built-in operation.>>=
<<For each argument>> {
    if (<<the argument is not a number>>) {
        <<Delete the arguments and return a bad number error.>>
    }
}

@


\begin{marginnote}
<<Pop the first element.>>=
lval_pop(args, 0);
@
\end{marginnote}


Pop the first element.
<<Eval(uate) a built-in operation.>>=
lval *result = <<Pop the first element.>>

@


If the operation is unary subtraction, negate the operand.
<<Eval(uate) a built-in operation.>>=
if (!strcmp(op, "-") && !args->count)
    result->num = -result->num;

@


\begin{marginnote}
<<Pop the next element.>>=
lval *y = <<Pop the first element.>>
@
\end{marginnote}

<<Eval(uate) a built-in operation.>>=
while (args->count > 0) {
    <<Pop the next element.>>

    <<Perform a built-in operation.>>
}

@


If the [[op]] is \cee{"+"}, perform addition.
<<Perform a built-in operation.>>=
if (!strcmp(op, "+")) {
    result->num += y->num;
}
@


If the [[op]] is \cee{"-"}, perform subtraction.
<<Perform a built-in operation.>>=
else if (!strcmp(op, "-")) {
    result->num -= y->num;
}
@


If the [[op]] is \cee{"*"}, perform multiplication.
<<Perform a built-in operation.>>=
else if (!strcmp(op, "*")) {
    result->num *= y->num;
}
@


If the [[op]] is \cee{"/"}, perform division, returning the
appropriate error and cleaning up when trying to divide by zero.
<<Perform a built-in operation.>>=
else if (!strcmp(op, "/")) {
    if (!y->num) {
        lval_del(result);
        lval_del(y);
        result = lval_err(LERR_DIV_ZERO);
        break;
    }
    result->num /= y->num;
}
@


If the [[op]] is \cee{"%"}, calculate the integer modulo, returning the
appropriate error when trying to divide by zero.

<<Perform a built-in operation.>>=
else if (!strcmp(op, "%")) {
    if (!y->num) {
        lval_del(result);
        lval_del(y);
        result = lval_err(LERR_DIV_ZERO);
        break;
    }
    result->num = fmod(result->num, y->num);
}
@

If the [[op]] is \cee{"^"}, perform exponentiation.

<<Perform a built-in operation.>>=
else if (!strcmp(op, "^")) {
    result->num = pow(result->num, y->num);
}
@

Otherwise, return a \cee{LERR_BAD_OP} error.
<<Perform a built-in operation.>>=
else {
    lval_del(result);
    lval_del(y);
    result = lval_err(LERR_BAD_OP);
    break;
}
@


Delete [[y]], now that we're done with it.
<<Perform a built-in operation.>>=
lval_del(y);
@


Delete the input expression and return the result.
<<Eval(uate) a built-in operation.>>=
lval_del(args);

return result;
@

\subsection{Built-in functions}

If the function name is \cee{list}, convert the given S-expression to
a Q-expression and return it.
<<Evaluate a built-in function or operation.>>=
if (!strcmp("list", fname))
    return builtin_list(args);

@

<<Convert an S-expression to a Q-expression.>>=
args->type = LVAL_QEXPR;
return args;
@

If the function name is \cee{head}, pop the list and delete the rest.
<<Evaluate a built-in function or operation.>>=
if (!strcmp("head", fname))
    return builtin_head(args);
@

Ensure there is exactly one argument.
<<Pop the list and delete the rest.>>=
LVAL_ASSERT_NUM_ARGS("head", 1, args);
@

Ensure the first argument is a Q-expression.
<<Pop the list and delete the rest.>>=
LVAL_ASSERT(args, args->cell[0]->type == LVAL_QEXPR,
    "invalid argument for 'head'");
@

Ensure the list passed to \cee{head} is nonempty.
<<Pop the list and delete the rest.>>=
LVAL_ASSERT(args, args->cell[0]->count,
    "cannot get 'head' of the empty list");
@

Take the first element of the list.
<<Pop the list and delete the rest.>>=
lval *val = lval_take(args, 0);
@

Delete the rest.
<<Pop the list and delete the rest.>>=
while (val->count > 1)
    lval_del(lval_pop(val, 1));
@

Return the head of the list.
<<Pop the list and delete the rest.>>=
return val;
@


If the function name is \cee{tail}, return the given Q-expression with
the first element removed.

<<Evaluate a built-in function or operation.>>=
if (!strcmp("tail", fname))
    return builtin_tail(args);
@

\todoo{Split this up and describe}
<<Return the tail of a list.>>=
LVAL_ASSERT_NUM_ARGS("tail", 1, args);
LVAL_ASSERT(args, args->cell[0]->type == LVAL_QEXPR,
    "invalid argument for 'tail'");
LVAL_ASSERT(args, args->cell[0]->count,
    "cannot get 'tail' of the empty list");

lval *val = lval_take(args, 0);
lval_del(lval_pop(val, 0));

return val;
@


If the function name is \cee{join}, concatenate the given Q-expressions.

<<Evaluate a built-in function or operation.>>=
if (!strcmp("join", fname))
    return builtin_join(args);
@

Ensure every argument is a Q-expression.

<<Return the concatenation of lists.>>=
<<For each argument>> {
    LVAL_ASSERT(args, args->cell[i]->type == LVAL_QEXPR,
                "invalid argument for 'join'");
}

@

\todoo{Describe this}

<<Return the concatenation of lists.>>=
lval *res = lval_pop(args, 0);

while (args->count) {
    res = lval_join(res, lval_pop(args, 0));
}

lval_del(args);

return res;

@

\todoo{Describe this}

<<Add every y in ys to xs.>>=
while (ys->count) {
    xs = lval_add(xs, lval_pop(ys, 0));
}

lval_del(ys);

return xs;
@


If the function name is \cee{eval}, convert a given Q-expression to an
S-expression, and evaluate it.

<<Evaluate a built-in function or operation.>>=
if (!strcmp("eval", fname))
    return builtin_eval(args);
@

Ensure exactly one Q-expression is passed to \cee{eval}.

<<Evaluate a Q-expression.>>=
LVAL_ASSERT(args, args->count == 1,
            "too many arguments for 'eval'");

LVAL_ASSERT(args, args->cell[0]->type == LVAL_QEXPR,
            "invalid argument for 'eval'");

@

Convert the Q-expression to an S-expression, by changing it's
\cee{type}, then evaluate and return it.

<<Evaluate a Q-expression.>>=
lval *expr = lval_take(args, 0);
expr->type = LVAL_SEXPR;

return lval_eval(expr);
@


If the function name is a built-in operation, perform and return it.
<<Evaluate a built-in function or operation.>>=
if (strstr("+-/*^%", fname))
    return builtin_op(fname, args);

@

Otherwise, free the memory used by [[args]] and return an error.
<<Evaluate a built-in function or operation.>>=
lval_del(args);

return lval_err(LERR_BAD_FUNC);
@


\subsection{Evaluating (S)-expressions}

If the expression is empty, return it;
<<Evaluate an S-expression.>>=
if (!args->count)
    return args;
@

<<Evaluate an S-expression.>>=
<<For each argument>> {
    args->cell[i] = lval_eval(args->cell[i]);
    if (args->cell[i]->type == LVAL_ERR)
        return lval_take(args, i);
}

@

If we're dealing with a single expression, return it.
<<Evaluate an S-expression.>>=
if (args->count == 1)
    return lval_take(args, 0);

@

<<Evaluate an S-expression.>>=
lval *car = <<Pop the first element.>>;
if (car->type != LVAL_SYM) {
    lval_del(car);
    lval_del(args);

    return lval_err(LERR_BAD_SEXPR);
}

@

<<Evaluate an S-expression.>>=
lval *result = builtin(car->sym, args);
lval_del(car);

return result;
@


If, and only if, an expression is an S-expression,
we must evaluate it recursively.
<<Evaluate an expression.>>=
if (val->type == LVAL_SEXPR)
    return lval_eval_sexpr(val);

return val;
@

%% \section{Pop and take}

Extract the element at index [[i]].
<<Extract an element and shift the list.>>=
lval *elem = xs->cell[i];

@

Shift memory after the element at index [[i]].
<<Extract an element and shift the list.>>=
memmove(&xs->cell[i], &xs->cell[i + 1],
    sizeof(lval *) * (xs->count - i - 1));

@

Decrease the count.
<<Extract an element and shift the list.>>=
xs->count--;

@

\begin{marginnote}
<<Return the extracted element.>>=
return elem;
@
\end{marginnote}

Reallocate the memory used and return the extracted element.
<<Extract an element and shift the list.>>=
<<Reallocate the memory used.>>

<<Return the extracted element.>>
@


\todoo{Describe this}

<<Pop the list then delete it.>>=
lval *elem = lval_pop(xs, i);
lval_del(xs);

@

Return the extracted element.
<<Pop the list then delete it.>>=
<<Return the extracted element.>>
@


\section{P is for Print}

Upon success, print the result and delete the \acrshort{ast}.

<<Print the result and delete the AST.>>=
lval_println(result);

mpc_ast_delete(ast);
@

\todoo{Describe this}

Print the opening character.
<<Print an expression.>>=
putchar(open);
@

Print all but the last element with a trailing space.
<<Print an expression.>>=
for (int i = 0; i < expr->count; i++) {
    lval_print(expr->cell[i]);
    if (i != (expr->count - 1))
        putchar(' ');
}
@

Print the closing character.
<<Print an expression.>>=
putchar(close);
@

<<Print a Lispy value.>>=
switch (val->type) {
case LVAL_ERR:
    printf("Error: %s", val->err);
    break;
case LVAL_NUM:
    printf("%g", val->num);
    break;
case LVAL_QEXPR:
    lval_expr_print(val, '{', '}');
    break;
case LVAL_SEXPR:
    lval_expr_print(val, '(', ')');
    break;
case LVAL_SYM:
    fputs(val->sym, stdout);
    break;
}
@

Print and delete the error upon failure.

<<Print and delete the error.>>=
mpc_err_print(parsed.error);
mpc_err_delete(parsed.error);
@

\section{L is for Loop}

<<Loop until the input is empty.>>=
bool nonempty;
do {
  <<Read, eval(uate), and print.>>
} while (nonempty);
@ %def nonempty

As previously described, in the body of the loop,
\textbf{R}ead a line of user input.

<<Read, eval(uate), and print.>>=
<<Read a line of user input.>>
@

If, and only if, it's not empty, add it to the history table,
\textbf{E}val(uate) it, and \textbf{P}rint the result.

<<Read, eval(uate), and print.>>=
if ((nonempty = (<<[[input]] is nonempty>>))) {
    <<Add [[input]] to the history table.>>

    <<Declare a variable to hold parsing results.>>
    if (<<the input can be parsed as Lispy code>>) {
        <<Eval(uate) the input.>>
        <<Print the result and delete the AST.>>
    } else {
        <<Print and delete the error.>>
    }
}

@

Once we're done, deallocate the space pointed to by [[input]],
making it available for futher allocation.

<<Read, eval(uate), and print.>>=
free(input);
@
\marginnote{N.B. This is a no-op when \cee{!input}.}


\section{Error Handling}

\todoo{Describe this struct}

<<Define the Lispy data structures.>>=
typedef struct lval {
    lval_type_t type;
    union {
        double num;
        char *err;
        char *sym;
    };
    int count;
    struct lval **cell;
} lval;


@ %def lval

A Lispy value can be either a number or an error.

<<Define possible lval and error types.>>=
typedef enum {
    LVAL_ERR,
    LVAL_NUM,
    LVAL_QEXPR,
    LVAL_SEXPR,
    LVAL_SYM
} lval_type_t;


@ %def LVAL_ERR
@ %def LVAL_ERR
@ %def LVAL_NUM
@ %def LVAL_QEXPR
@ %def LVAL_SEXPR
@ %def LVAL_SYM
@ %def lval_type_t

Define a constructor for numbers.

<<Define the Lispy data structures.>>=
lval *lval_num(double num)
{
    lval *val = malloc(sizeof(lval));
    val->type = LVAL_NUM;
    val->num = num;

    return val;
}


@ %def lval_num


Define a convenient predicate for numbers.

<<Define the Lispy data structures.>>=
bool lval_is_num(lval *val)
{
    return val->type == LVAL_NUM;
}


@ %def lval_is_num


Define a macro for asserting a condition or returning an error.

<<Define some useful macros.>>=
#define LVAL_ASSERT(args, cond, err) \
    if (!(cond)) { \
        lval_del(args); \
        return lval_err(err); \
    }

@

<<Define some useful macros.>>=
#define LERR_BAD_FUNC "unknown function"
#define LERR_BAD_NUM "invalid number"
#define LERR_BAD_OP "invalid operation"
#define LERR_DIV_ZERO "division by zero"
#define LERR_BAD_SEXPR "invalid S-expression"

@


<<Define some useful macros.>>=
#define LVAL_ERROR_MSG_NUM_ARGS(fname, prefix) ({ \
    char *_msg = malloc(strlen(prefix) + 17 + strlen(fname) + 2); \
    strcpy(_msg, prefix); \
    strcat(_msg, " arguments for '"); \
    strcat(_msg, fname); \
    strcat(_msg, "'"); \
    _msg; \
})


#define LVAL_ASSERT_NUM_ARGS(fname, num, args) ({ \
    LVAL_ASSERT(args, args->count >= num, \
                LVAL_ERROR_MSG_NUM_ARGS(fname, "too few")); \
    LVAL_ASSERT(args, args->count <= num, \
                LVAL_ERROR_MSG_NUM_ARGS(fname, "too many")); \
})
@


Define a constructor for errors.

<<Define the Lispy data structures.>>=
lval *lval_err(char *err)
{
    lval *val = malloc(sizeof(lval));
    val->type = LVAL_ERR;
    val->err = err;

    return val;
}


@ %def lval_err


Define a constructor for symbol.

<<Define the Lispy data structures.>>=
lval *lval_sym(char *s)
{
    lval *val = malloc(sizeof(lval));
    val->type = LVAL_SYM;
    val->sym = malloc(strlen(s) + 1);
    strcpy(val->sym, s);

    return val;
}


@ %def lval_sym


Define a constructor for an S-expression.

<<Define the Lispy data structures.>>=
lval *lval_sexpr(void)
{
    lval *val = malloc(sizeof(lval));
    val->type = LVAL_SEXPR;
    val->count = 0;
    val->cell = NULL;

    return val;
}


@ %def lval_sexpr


Define a constructor for a Q-expression.
<<Define the Lispy data structures.>>=
lval *lval_qexpr(void)
{
    lval *val = malloc(sizeof(lval));
    val->type = LVAL_QEXPR;
    val->count = 0;
    val->cell = NULL;

    return val;
}


@ %def lval_qexpr


Define a destructor for \cee{lval*}.

<<Define the Lispy data structures.>>=
void lval_del(lval *val)
{
    switch(val->type) {
    case LVAL_ERR:
        free(val->err);
        break;
    case LVAL_NUM:
        break;
    case LVAL_QEXPR:
    case LVAL_SEXPR:
        for (int i = 0; i < val->count; i++)
            lval_del(val->cell[i]);
        free(val->cell);
        break;
    case LVAL_SYM:
        free(val->sym);
        break;
    }

    free(val);
}
@ %def lval_del


\section{Headers}

\todoo{Describe headers}

<<Include the necessary headers.>>=
<<Include the boolean type and values.>>
<<Include the standard I/O functions.>>
<<Include the standard library definitions.>>
<<Include some mathematical definitions.>>
<<Include some string operations.>>

<<Include the line editing functions from libedit.>>
<<Include the micro parser combinator definitions.>>
@


<<Include the boolean type and values.>>=
#include <stdbool.h>
@ %def bool

<<Include the standard I/O functions.>>=
#include <stdio.h>
@ %def printf

<<Include the standard library definitions.>>=
#include <stdlib.h>
@ %def free
@ %def strtod

<<Include some mathematical definitions.>>=
#include <math.h>
@ %def fmod
@ %def pow

<<Include some string operations.>>=
#include <string.h>
@ %def strcmp
@ %def strstr

<<Include the line editing functions from libedit.>>=
#include <editline/readline.h>
@ %def add_history
@ %def readline

<<Include the micro parser combinator definitions.>>=
#include <mpc.h>
@ %def mpc_ast_delete
@ %def mpc_ast_print
@ %def mpc_ast_t
@ %def mpc_cleanup
@ %def mpc_err_delete
@ %def mpc_err_print
@ %def mpc_new
@ %def mpc_parse
@ %def mpc_parser_t
@ %def mpc_result_t
@ %def mpca_lang


\newpage
\section{Full Listings}

\srclink{lispy.mpc}:
\inputminted{ruby}{lispy.mpc}


\newpage
\srclink{lispy.c}:
\inputc{lispy.c}


\newpage
\section{Chunks}
\nowebchunks


\newpage
\section{Index}
\nowebindex


\newpage
\printglossaries


\newpage
\bibliography{lispy}
\bibliographystyle{plainnat}


\newpage
\listoftodos

\end{document}
